<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Build &amp; Deploy the Backend</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline{
    agent any
    stages{
        stage(&apos;Clone Git Repository&apos;) {
            steps {
                git &apos;https://github.com/ethmur/QATMS&apos;
            }
        }
        stage(&apos;Maven Test&apos;) {
            steps {
                dir(&apos;backend/&apos;) {
                    withMaven {
                        sh &apos;mvn clean test&apos;
                    }
                }
            }
        }
        stage(&apos;Maven Build&apos;) {
            steps {
                dir(&apos;backend/&apos;) {
                    withMaven {
                        sh &apos;mvn clean package -Dmaven.test.skip=true&apos;
                    }
                }
            }
        }
        stage(&apos;Build Docker Image&apos;) {
            steps {
                dir(&apos;backend/&apos;) {
                    withCredentials([usernamePassword(credentialsId: &apos;dockerhub&apos;, usernameVariable: &apos;username&apos;, passwordVariable: &apos;password&apos;)]) {
                        script {
                            image = docker.build(&quot;${username}/tms_backend&quot;)
                        }
                    }
                }
            }
        }
        stage(&apos;Push Docker Image&apos;) {
            steps {
                script {
                    docker.withRegistry(&apos;https://registry.hub.docker.com&apos;, &apos;dockerhub&apos;) {
                        image.push()
                    }
                }
            }
        }
        stage(&apos;Deploy Kubernetes Container&apos;) {
            steps {
                dir(&apos;backend/&apos;) {
                    sh &quot;&quot;&quot;
                        set +x
                        sed &apos;s/{{DB_ENDPOINT}}/&apos;${DB_ENDPOINT}&apos;/g;s/{{DB_USERNAME}}/&apos;${DB_USERNAME}&apos;/g;s/{{DB_PASSWORD}}/&apos;${DB_PASSWORD}&apos;/g;&apos; kubefile.yaml | kubectl delete -f - --ignore-not-found=true
                        sed &apos;s/{{DB_ENDPOINT}}/&apos;${DB_ENDPOINT}&apos;/g;s/{{DB_USERNAME}}/&apos;${DB_USERNAME}&apos;/g;s/{{DB_PASSWORD}}/&apos;${DB_PASSWORD}&apos;/g;&apos; kubefile.yaml | kubectl apply -f -
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;Show Kubernetes Services&apos;) {
            steps {
                sh &apos;sleep 20&apos;
                sh &apos;kubectl get services&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
